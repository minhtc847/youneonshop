definitions:
  data.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      first-name:
        type: string
      id:
        type: string
      last_name:
        type: string
      modified_at:
        type: string
      telephone:
        type: string
    type: object
  main.CartRequest:
    properties:
      product_id:
        type: string
      quantity:
        type: integer
    type: object
  main.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  main.UserRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
    type: object
  main.envelope:
    additionalProperties: {}
    type: object
info:
  contact: {}
paths:
  /carts:
    get:
      consumes:
      - application/json
      description: Get cart items
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.envelope'
      summary: Get cart items
      tags:
      - carts
    post:
      consumes:
      - application/json
      description: Insert a cart item
      parameters:
      - description: Cart request
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/main.CartRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.envelope'
      summary: Insert a cart item
      tags:
      - carts
  /carts/{id}:
    delete:
      consumes:
      - application/json
      description: Remove a cart item
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.envelope'
      summary: Remove a cart item
      tags:
      - carts
    put:
      consumes:
      - application/json
      description: Update a cart item
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Quantity
        in: body
        name: quantity
        required: true
        schema:
          $ref: '#/definitions/main.CartRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.envelope'
      summary: Update a cart item
      tags:
      - carts
  /categories:
    get:
      consumes:
      - application/json
      description: Get all categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.envelope'
      summary: Get all categories
      tags:
      - products
  /products:
    get:
      consumes:
      - application/json
      description: Get a list of products, sorted by "name", "price", "modified_at",
        "-name", "-price", "-modified_at"
      parameters:
      - description: Category
        in: query
        name: category
        type: string
      - collectionFormat: csv
        description: Tags
        in: query
        items:
          type: string
        name: tags
        type: array
      - description: Name
        in: query
        name: name
        type: string
      - description: Price from
        in: query
        name: price_from
        type: integer
      - description: Price to
        in: query
        name: price_to
        type: integer
      - description: Page
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      - description: Sort
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.envelope'
      summary: List products
      tags:
      - products
  /products/{id}:
    get:
      consumes:
      - application/json
      description: Get a product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.envelope'
      summary: Get a product
      tags:
      - products
  /tags:
    get:
      consumes:
      - application/json
      description: Get all tags
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.envelope'
      summary: Get all tags
      tags:
      - products
  /users:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: register user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/main.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/data.User'
      summary: Register a user
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: Create a new authentication token for a user
      parameters:
      - description: user details
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/main.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Create a new authentication token for a user
      tags:
      - users
  /users/logout:
    post:
      description: Logout a user
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Logout a user
      tags:
      - users
swagger: "2.0"
